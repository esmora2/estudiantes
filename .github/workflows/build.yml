name: Build and Analyze with SonarQube

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: sisdb2025

      sonarqube:
        image: sonarqube:community
        ports:
          - "9000:9000"
        options: --name sonarqube
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sisdb2025
          SONAR_JDBC_USERNAME: postgres
          SONAR_JDBC_PASSWORD: admin

    steps:
      # Checkout del repositorio
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Configuración de Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # Cache de dependencias de Maven
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Esperar a que PostgreSQL esté disponible
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          echo "PostgreSQL is ready!"

      # Esperar a que SonarQube esté disponible
      - name: Wait for SonarQube
        run: |
          until curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; do
            echo "Waiting for SonarQube to be ready..."
            sleep 10
          done
          echo "SonarQube is ready!"

      # Configurar la base de datos si es necesario
      - name: Configure database
        run: |
          psql -h localhost -U postgres -d postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'sisdb2025'" | grep -q 1 || psql -h localhost -U postgres -d postgres -c "CREATE DATABASE sisdb2025;"
        env:
          PGPASSWORD: admin

      # Construcción, pruebas y análisis con SonarQube
      - name: Build, Test, and Analyze with SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://localhost:9000
        run: |
          mvn clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=estudiantes \
            -Dsonar.projectName='estudiantes' \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      # Verificar que el informe de cobertura de JaCoCo existe
      - name: Verify Jacoco Coverage Report
        run: |
          if [ ! -f target/site/jacoco/jacoco.xml ]; then
            echo "Jacoco coverage report not found!"
            exit 1
          else
            echo "Jacoco coverage report generated successfully."
          fi
